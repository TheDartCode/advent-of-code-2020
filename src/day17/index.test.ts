import day17 from "./index";
import { parseGrid, expandGrid } from "./helpers";
import { CubeState, Grid } from "./types";
import { round, visualizeGrid } from "./moduleA";

const TEST_DATA = `.#.
..#
###`;

describe("day17", () => {
  describe("#parseGrid", () => {
    it("correctly parses the string representation of the initial Grid", () => {
      expect(parseGrid(TEST_DATA)).toEqual({
        0: {
          0: {
            0: { state: "." },
            1: { state: "#" },
            2: { state: "." },
          },
          1: {
            0: { state: "." },
            1: { state: "." },
            2: { state: "#" },
          },
          2: {
            0: { state: "#" },
            1: { state: "#" },
            2: { state: "#" },
          },
        },
      });
    });
    describe("#expandGrid", () => {
      it("expands a given grid accross all dimensions", () => {
        const grid: Grid = {
          "0": {
            "0": {
              "0": { state: CubeState.Inactive },
              "1": { state: CubeState.Inactive },
            },
            "1": {
              "0": { state: CubeState.Active },
              "1": { state: CubeState.Inactive },
            },
          },
        };
        expandGrid(grid);
        expect(grid).toEqual({
          "-1": {
            "-1": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "0": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "1": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "2": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
          },
          "0": {
            "-1": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "0": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "1": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Active },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "2": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
          },
          "1": {
            "-1": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "0": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "1": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
            "2": {
              "-1": { state: CubeState.Inactive },
              0: { state: CubeState.Inactive },
              1: { state: CubeState.Inactive },
              2: { state: CubeState.Inactive },
            },
          },
        });
      });
      it("second test", () => {
        const grid = parseGrid(TEST_DATA);
        expandGrid(grid);
        expandGrid(grid);
        expandGrid(grid);
        expect(visualizeGrid(grid)).toEqual(`z=-3
.........
.........
.........
.........
.........
.........
.........
.........
.........
z=-2
.........
.........
.........
.........
.........
.........
.........
.........
.........
z=-1
.........
.........
.........
.........
.........
.........
.........
.........
.........
z=0
.........
.........
.........
....#....
.....#...
...###...
.........
.........
.........
z=1
.........
.........
.........
.........
.........
.........
.........
.........
.........
z=2
.........
.........
.........
.........
.........
.........
.........
.........
.........
z=3
.........
.........
.........
.........
.........
.........
.........
.........
.........`);
      });
    });
  });
  describe("first part", () => {
    it("calculates rounds correctly", () => {
      let grid = parseGrid(TEST_DATA);
      grid = round(grid);
      grid = round(grid);
      grid = round(grid);
      expect(visualizeGrid(grid)).toEqual(`z=-3
.........
.........
.........
.........
.........
.........
.........
.........
.........
z=-2
.........
.........
.........
.........
...##....
...###...
.........
.........
.........
z=-1
.........
.........
...#.....
....#....
.#.......
......##.
..#...#..
...#.#...
....#....
z=0
.........
.........
....#....
.........
.#.......
.........
......##.
..##.#...
....#....
z=1
.........
.........
...#.....
....#....
.#.......
......##.
..#...#..
...#.#...
....#....
z=2
.........
.........
.........
.........
...##....
...###...
.........
.........
.........
z=3
.........
.........
.........
.........
.........
.........
.........
.........
.........`);
    });
    it("satisfies test data", () => {
      expect(day17("a", TEST_DATA)).toBe("112");
    });
  });
  describe("second part", () => {
    it.skip("satisfies test data", () => {
      expect(day17("b", TEST_DATA)).toBe("1");
    });
  });
});
